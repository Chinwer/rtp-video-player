import sysimport timeimport randomimport socketimport stringimport threadingfrom os import pathsys.path.append(path.dirname(path.dirname(path.dirname(path.abspath(__file__)))))from handler import Handlerfrom task2.rtppkt.rtppkt import RtpPacketfrom task2.request import RequestINIT = 0READY = 1PLAYING = 2class Server:    BUF_SIZE  = 2048    RTSP_PORT = 5544    def __init__(self):        if len(sys.argv) > 1:            self.rtspport = sys.argv[1]        else:            self.rtspport = self.RTSP_PORT        self.rtspsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        self.rtspsock.bind(('0.0.0.0', self.rtspport))        self.rtspsock.listen(10)    def print_log(self, msg):        curTime = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())        print('\033[31m{} \033[0m: \033[32m{}\033[0m'.format(curTime, msg))    def serve(self):        self.print_log('RTSP server starts running on port {}'.format(self.rtspport))        while True:            sock, addr = self.rtspsock.accept()            self.print_log('Connected to client {}'.format(addr))            threading.Thread(target=self.serve_solo, args=(sock, addr)).start()    def serve_solo(self, sock, addr):        handler = Handler(addr)        while True:            msg = sock.recv(handler.BUF_SIZE).decode()            self.print_log('Received reqeust: \n' + msg)            request = Request(msg)            resp = str(handler.process(request))            self.print_log('Sent repsonse: \n' + resp)            sock.send(resp.encode())if __name__ == '__main__':    Server().serve()